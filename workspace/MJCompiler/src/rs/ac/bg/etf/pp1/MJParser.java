
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Jan 26 03:03:29 CET 2022
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

/** CUP v0.10k generated parser.
  * @version Wed Jan 26 03:03:29 CET 2022
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\215\000\002\063\010\000\002\002\004\000\002\057" +
    "\003\000\002\003\004\000\002\003\002\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\006\006\000\002\011\005\000\002\011\003\000\002" +
    "\062\005\000\002\062\005\000\002\062\005\000\002\007" +
    "\005\000\002\007\004\000\002\012\005\000\002\012\003" +
    "\000\002\103\002\000\002\012\006\000\002\064\003\000" +
    "\002\064\005\000\002\013\004\000\002\013\002\000\002" +
    "\004\004\000\002\004\002\000\002\015\012\000\002\015" +
    "\011\000\002\104\002\000\002\015\013\000\002\016\005" +
    "\000\002\016\003\000\002\105\002\000\002\016\006\000" +
    "\002\070\004\000\002\070\006\000\002\067\004\000\002" +
    "\067\004\000\002\074\003\000\002\023\004\000\002\023" +
    "\003\000\002\073\011\000\002\073\006\000\002\073\010" +
    "\000\002\021\004\000\002\021\006\000\002\020\004\000" +
    "\002\020\003\000\002\020\003\000\002\022\011\000\002" +
    "\041\003\000\002\010\006\000\002\066\004\000\002\017" +
    "\004\000\002\017\002\000\002\026\003\000\002\026\003" +
    "\000\002\034\005\000\002\034\003\000\002\034\005\000" +
    "\002\035\011\000\002\035\007\000\002\035\007\000\002" +
    "\035\005\000\002\106\002\000\002\035\010\000\002\053" +
    "\003\000\002\055\003\000\002\054\007\000\002\030\003" +
    "\000\002\014\003\000\002\027\004\000\002\027\005\000" +
    "\002\027\006\000\002\027\004\000\002\027\004\000\002" +
    "\027\005\000\002\027\004\000\002\027\007\000\002\027" +
    "\010\000\002\027\005\000\002\027\005\000\002\040\003" +
    "\000\002\042\006\000\002\056\003\000\002\033\004\000" +
    "\002\033\002\000\002\102\003\000\002\043\005\000\002" +
    "\043\003\000\002\036\003\000\002\044\003\000\002\046" +
    "\005\000\002\046\003\000\002\045\003\000\002\045\005" +
    "\000\002\032\005\000\002\032\006\000\002\032\005\000" +
    "\002\032\004\000\002\032\004\000\002\065\003\000\002" +
    "\060\004\000\002\060\003\000\002\060\005\000\002\061" +
    "\004\000\002\061\005\000\002\071\004\000\002\072\005" +
    "\000\002\072\002\000\002\077\003\000\002\077\004\000" +
    "\002\031\003\000\002\100\005\000\002\100\003\000\002" +
    "\075\003\000\002\101\005\000\002\101\003\000\002\050" +
    "\005\000\002\076\004\000\002\076\005\000\002\076\003" +
    "\000\002\076\003\000\002\076\003\000\002\076\003\000" +
    "\002\076\007\000\002\076\004\000\002\076\005\000\002" +
    "\037\003\000\002\047\003\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\047\003\000\002\047\003" +
    "\000\002\051\003\000\002\051\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0107\000\004\004\005\001\002\000\004\002\u0109\001" +
    "\002\000\004\062\006\001\002\000\016\003\uffff\005\uffff" +
    "\016\uffff\020\uffff\024\uffff\062\uffff\001\002\000\016\003" +
    "\ufffd\005\ufffd\016\ufffd\020\ufffd\024\ufffd\062\ufffd\001\002" +
    "\000\016\003\022\005\012\016\026\020\016\024\025\062" +
    "\014\001\002\000\006\003\376\062\377\001\002\000\010" +
    "\006\uffe7\015\uffe7\062\uffe7\001\002\000\016\003\ufffe\005" +
    "\ufffe\016\ufffe\020\ufffe\024\ufffe\062\ufffe\001\002\000\054" +
    "\003\uffda\005\uffda\007\uffda\010\uffda\011\uffda\012\uffda\014" +
    "\uffda\022\uffda\023\uffda\045\uffda\046\uffda\047\uffda\050\uffda" +
    "\051\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda\057" +
    "\uffda\062\uffda\001\002\000\016\003\ufff9\005\ufff9\016\ufff9" +
    "\020\ufff9\024\ufff9\062\ufff9\001\002\000\004\062\371\001" +
    "\002\000\016\003\ufffb\005\ufffb\016\ufffb\020\ufffb\024\ufffb" +
    "\062\ufffb\001\002\000\016\003\ufffa\005\ufffa\016\ufffa\020" +
    "\ufffa\024\ufffa\062\ufffa\001\002\000\004\005\366\001\002" +
    "\000\004\007\365\001\002\000\004\005\045\001\002\000" +
    "\016\003\ufffc\005\ufffc\016\ufffc\020\ufffc\024\ufffc\062\ufffc" +
    "\001\002\000\004\062\014\001\002\000\004\062\027\001" +
    "\002\000\006\005\uffd4\017\030\001\002\000\004\062\014" +
    "\001\002\000\004\005\uffd3\001\002\000\004\062\034\001" +
    "\002\000\006\007\043\010\042\001\002\000\004\044\036" +
    "\001\002\000\006\007\ufff6\010\ufff6\001\002\000\010\063" +
    "\037\064\040\065\041\001\002\000\006\007\ufff5\010\ufff5" +
    "\001\002\000\006\007\ufff4\010\ufff4\001\002\000\006\007" +
    "\ufff3\010\ufff3\001\002\000\004\062\034\001\002\000\016" +
    "\003\ufff8\005\ufff8\016\ufff8\020\ufff8\024\ufff8\062\ufff8\001" +
    "\002\000\006\007\ufff7\010\ufff7\001\002\000\012\003\uffe9" +
    "\005\uffe9\006\uffe9\062\uffe9\001\002\000\012\003\022\005" +
    "\047\006\051\062\014\001\002\000\010\006\062\015\056" +
    "\062\053\001\002\000\012\003\uffea\005\uffea\006\uffea\062" +
    "\uffea\001\002\000\016\003\uffd6\005\uffd6\016\uffd6\020\uffd6" +
    "\024\uffd6\062\uffd6\001\002\000\004\062\364\001\002\000" +
    "\006\013\uffce\062\uffda\001\002\000\004\013\356\001\002" +
    "\000\004\006\354\001\002\000\004\062\353\001\002\000" +
    "\010\006\uffd8\015\uffd8\062\uffd8\001\002\000\004\013\067" +
    "\001\002\000\010\006\uffd1\015\056\062\014\001\002\000" +
    "\004\006\066\001\002\000\010\006\uffd0\015\056\062\014" +
    "\001\002\000\010\006\uffd2\015\056\062\014\001\002\000" +
    "\010\006\uffd9\015\uffd9\062\uffd9\001\002\000\016\003\uffd5" +
    "\005\uffd5\016\uffd5\020\uffd5\024\uffd5\062\uffd5\001\002\000" +
    "\010\003\073\014\072\062\014\001\002\000\006\010\uffe1" +
    "\014\uffe1\001\002\000\004\062\350\001\002\000\010\003" +
    "\uffe9\005\uffe9\062\uffe9\001\002\000\006\010\uffe0\014\uffe4" +
    "\001\002\000\006\010\075\014\076\001\002\000\004\062" +
    "\014\001\002\000\010\003\uffe9\005\uffe9\062\uffe9\001\002" +
    "\000\010\003\022\005\100\062\014\001\002\000\034\003" +
    "\uffca\005\uffca\006\uffca\025\uffca\030\uffca\031\uffca\032\uffca" +
    "\033\uffca\034\uffca\042\uffca\060\uffca\061\uffca\062\uffca\001" +
    "\002\000\034\003\127\005\115\006\110\025\114\030\123" +
    "\031\104\032\111\033\112\034\117\042\116\060\103\061" +
    "\126\062\105\001\002\000\012\013\325\035\322\036\324" +
    "\044\323\001\002\000\004\013\315\001\002\000\004\007" +
    "\314\001\002\000\020\011\uff99\013\uff99\021\uffbb\035\uff99" +
    "\036\uff99\037\uff99\044\uff99\001\002\000\032\003\127\005" +
    "\115\025\114\030\123\031\104\032\111\033\112\034\117" +
    "\042\116\060\103\061\126\062\105\001\002\000\004\007" +
    "\303\001\002\000\010\006\uffe6\015\uffe6\062\uffe6\001\002" +
    "\000\004\062\301\001\002\000\024\007\276\013\145\042" +
    "\116\043\134\053\132\062\133\063\141\064\136\065\147" +
    "\001\002\000\004\026\244\001\002\000\004\013\uffbd\001" +
    "\002\000\034\003\uffca\005\uffca\006\uffca\025\uffca\030\uffca" +
    "\031\uffca\032\uffca\033\uffca\034\uffca\042\uffca\060\uffca\061" +
    "\uffca\062\uffca\001\002\000\004\037\267\001\002\000\032" +
    "\003\uffae\005\uffae\025\uffae\030\uffae\031\uffae\032\uffae\033" +
    "\uffae\034\uffae\042\uffae\060\uffae\061\uffae\062\uffae\001\002" +
    "\000\060\007\uff9b\010\uff9b\011\262\012\uff9b\013\uff9b\014" +
    "\uff9b\022\uff9b\023\uff9b\035\uff9b\036\uff9b\037\261\044\uff9b" +
    "\045\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053" +
    "\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b\001\002\000\040" +
    "\003\uffc6\005\uffc6\006\uffc6\025\uffc6\026\uffc6\027\uffc6\030" +
    "\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\042\uffc6\060\uffc6" +
    "\061\uffc6\062\uffc6\001\002\000\004\013\251\001\002\000" +
    "\004\007\250\001\002\000\004\021\211\001\002\000\036" +
    "\003\uffc8\005\uffc8\006\uffc8\025\uffc8\027\uffc8\030\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\034\uffc8\042\uffc8\060\uffc8\061\uffc8" +
    "\062\uffc8\001\002\000\004\013\202\001\002\000\022\013" +
    "\145\042\116\043\134\053\132\062\133\063\141\064\136" +
    "\065\147\001\002\000\034\003\uffcb\005\uffcb\006\uffcb\025" +
    "\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\042\uffcb" +
    "\060\uffcb\061\uffcb\062\uffcb\001\002\000\036\003\uffc9\005" +
    "\uffc9\006\uffc9\025\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9" +
    "\033\uffc9\034\uffc9\042\uffc9\060\uffc9\061\uffc9\062\uffc9\001" +
    "\002\000\020\013\uff90\042\uff90\043\uff90\062\uff90\063\uff90" +
    "\064\uff90\065\uff90\001\002\000\060\007\uff99\010\uff99\011" +
    "\uff99\012\uff99\013\uff99\014\uff99\022\uff99\023\uff99\035\uff99" +
    "\036\uff99\037\uff99\044\uff99\045\uff99\046\uff99\047\uff99\050" +
    "\uff99\051\uff99\052\uff99\053\uff99\054\uff99\055\uff99\056\uff99" +
    "\057\uff99\001\002\000\004\062\014\001\002\000\036\007" +
    "\uff92\010\uff92\012\uff92\014\uff92\022\uff92\023\uff92\045\uff92" +
    "\046\uff92\047\uff92\050\uff92\051\uff92\052\uff92\053\161\054" +
    "\160\001\002\000\044\007\uff85\010\uff85\012\uff85\014\uff85" +
    "\022\uff85\023\uff85\045\uff85\046\uff85\047\uff85\050\uff85\051" +
    "\uff85\052\uff85\053\uff85\054\uff85\055\uff85\056\uff85\057\uff85" +
    "\001\002\000\004\007\175\001\002\000\046\007\uff87\010" +
    "\uff87\012\uff87\013\164\014\uff87\022\uff87\023\uff87\045\uff87" +
    "\046\uff87\047\uff87\050\uff87\051\uff87\052\uff87\053\uff87\054" +
    "\uff87\055\uff87\056\uff87\057\uff87\001\002\000\044\007\uff86" +
    "\010\uff86\012\uff86\014\uff86\022\uff86\023\uff86\045\uff86\046" +
    "\uff86\047\uff86\050\uff86\051\uff86\052\uff86\053\uff86\054\uff86" +
    "\055\uff86\056\uff86\057\uff86\001\002\000\020\013\145\042" +
    "\116\043\134\062\133\063\141\064\136\065\147\001\002" +
    "\000\036\007\uff8e\010\uff8e\012\uff8e\014\uff8e\022\uff8e\023" +
    "\uff8e\045\uff8e\046\uff8e\047\uff8e\050\uff8e\051\uff8e\052\uff8e" +
    "\053\uff8e\054\uff8e\001\002\000\044\007\uff8b\010\uff8b\012" +
    "\uff8b\014\uff8b\022\uff8b\023\uff8b\045\uff8b\046\uff8b\047\uff8b" +
    "\050\uff8b\051\uff8b\052\uff8b\053\uff8b\054\uff8b\055\uff8b\056" +
    "\uff8b\057\uff8b\001\002\000\022\013\145\042\116\043\134" +
    "\053\132\062\133\063\141\064\136\065\147\001\002\000" +
    "\044\007\uff8d\010\uff8d\012\uff8d\014\uff8d\022\uff8d\023\uff8d" +
    "\045\uff8d\046\uff8d\047\uff8d\050\uff8d\051\uff8d\052\uff8d\053" +
    "\uff8d\054\uff8d\055\151\056\152\057\150\001\002\000\044" +
    "\007\uff84\010\uff84\012\uff84\014\uff84\022\uff84\023\uff84\045" +
    "\uff84\046\uff84\047\uff84\050\uff84\051\uff84\052\uff84\053\uff84" +
    "\054\uff84\055\uff84\056\uff84\057\uff84\001\002\000\020\013" +
    "\uff75\042\uff75\043\uff75\062\uff75\063\uff75\064\uff75\065\uff75" +
    "\001\002\000\020\013\uff77\042\uff77\043\uff77\062\uff77\063" +
    "\uff77\064\uff77\065\uff77\001\002\000\020\013\uff76\042\uff76" +
    "\043\uff76\062\uff76\063\uff76\064\uff76\065\uff76\001\002\000" +
    "\020\013\145\042\116\043\134\062\133\063\141\064\136" +
    "\065\147\001\002\000\044\007\uff8c\010\uff8c\012\uff8c\014" +
    "\uff8c\022\uff8c\023\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c" +
    "\051\uff8c\052\uff8c\053\uff8c\054\uff8c\055\uff8c\056\uff8c\057" +
    "\uff8c\001\002\000\004\014\156\001\002\000\044\007\uff81" +
    "\010\uff81\012\uff81\014\uff81\022\uff81\023\uff81\045\uff81\046" +
    "\uff81\047\uff81\050\uff81\051\uff81\052\uff81\053\uff81\054\uff81" +
    "\055\uff81\056\uff81\057\uff81\001\002\000\036\007\uff91\010" +
    "\uff91\012\uff91\014\uff91\022\uff91\023\uff91\045\uff91\046\uff91" +
    "\047\uff91\050\uff91\051\uff91\052\uff91\053\161\054\160\001" +
    "\002\000\020\013\uff79\042\uff79\043\uff79\062\uff79\063\uff79" +
    "\064\uff79\065\uff79\001\002\000\020\013\uff78\042\uff78\043" +
    "\uff78\062\uff78\063\uff78\064\uff78\065\uff78\001\002\000\020" +
    "\013\145\042\116\043\134\062\133\063\141\064\136\065" +
    "\147\001\002\000\036\007\uff8f\010\uff8f\012\uff8f\014\uff8f" +
    "\022\uff8f\023\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f\051" +
    "\uff8f\052\uff8f\053\uff8f\054\uff8f\001\002\000\024\013\145" +
    "\014\166\042\116\043\134\053\132\062\133\063\141\064" +
    "\136\065\147\001\002\000\044\007\uff89\010\uff89\012\uff89" +
    "\014\uff89\022\uff89\023\uff89\045\uff89\046\uff89\047\uff89\050" +
    "\uff89\051\uff89\052\uff89\053\uff89\054\uff89\055\uff89\056\uff89" +
    "\057\uff89\001\002\000\044\007\uff88\010\uff88\012\uff88\014" +
    "\uff88\022\uff88\023\uff88\045\uff88\046\uff88\047\uff88\050\uff88" +
    "\051\uff88\052\uff88\053\uff88\054\uff88\055\uff88\056\uff88\057" +
    "\uff88\001\002\000\006\010\uff93\014\uff93\001\002\000\004" +
    "\014\171\001\002\000\044\007\uff8a\010\uff8a\012\uff8a\014" +
    "\uff8a\022\uff8a\023\uff8a\045\uff8a\046\uff8a\047\uff8a\050\uff8a" +
    "\051\uff8a\052\uff8a\053\uff8a\054\uff8a\055\uff8a\056\uff8a\057" +
    "\uff8a\001\002\000\006\010\173\014\uff95\001\002\000\022" +
    "\013\145\042\116\043\134\053\132\062\133\063\141\064" +
    "\136\065\147\001\002\000\006\010\uff94\014\uff94\001\002" +
    "\000\040\003\uffaf\005\uffaf\006\uffaf\025\uffaf\026\uffaf\027" +
    "\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\042\uffaf" +
    "\060\uffaf\061\uffaf\062\uffaf\001\002\000\046\007\uff82\010" +
    "\uff82\011\177\012\uff82\014\uff82\022\uff82\023\uff82\045\uff82" +
    "\046\uff82\047\uff82\050\uff82\051\uff82\052\uff82\053\uff82\054" +
    "\uff82\055\uff82\056\uff82\057\uff82\001\002\000\022\013\145" +
    "\042\116\043\134\053\132\062\133\063\141\064\136\065" +
    "\147\001\002\000\004\012\201\001\002\000\044\007\uff83" +
    "\010\uff83\012\uff83\014\uff83\022\uff83\023\uff83\045\uff83\046" +
    "\uff83\047\uff83\050\uff83\051\uff83\052\uff83\053\uff83\054\uff83" +
    "\055\uff83\056\uff83\057\uff83\001\002\000\022\013\145\042" +
    "\116\043\134\053\132\062\133\063\141\064\136\065\147" +
    "\001\002\000\006\010\204\014\uffaa\001\002\000\004\063" +
    "\210\001\002\000\004\014\206\001\002\000\004\007\207" +
    "\001\002\000\040\003\uffb1\005\uffb1\006\uffb1\025\uffb1\026" +
    "\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1" +
    "\042\uffb1\060\uffb1\061\uffb1\062\uffb1\001\002\000\004\014" +
    "\uffab\001\002\000\030\003\127\025\114\030\123\031\104" +
    "\032\111\033\112\034\117\042\116\060\103\061\126\062" +
    "\133\001\002\000\004\026\244\001\002\000\040\003\uffc7" +
    "\005\uffc7\006\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031" +
    "\uffc7\032\uffc7\033\uffc7\034\uffc7\042\uffc7\060\uffc7\061\uffc7" +
    "\062\uffc7\001\002\000\004\013\215\001\002\000\022\013" +
    "\145\042\116\043\134\053\132\062\133\063\141\064\136" +
    "\065\147\001\002\000\010\014\uffa3\022\uffa3\023\uffa3\001" +
    "\002\000\006\014\uffa9\023\242\001\002\000\024\014\uffa2" +
    "\022\uffa2\023\uffa2\045\237\046\235\047\231\050\233\051" +
    "\234\052\232\001\002\000\010\014\uffa5\022\227\023\uffa5" +
    "\001\002\000\006\014\uffa7\023\uffa7\001\002\000\004\014" +
    "\224\001\002\000\032\003\127\005\115\025\114\030\123" +
    "\031\104\032\111\033\112\034\117\042\116\060\103\061" +
    "\126\062\105\001\002\000\036\003\uffc4\005\uffc4\006\uffc4" +
    "\025\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034" +
    "\uffc4\042\uffc4\060\uffc4\061\uffc4\062\uffc4\001\002\000\040" +
    "\003\uffc9\005\uffc9\006\uffc9\025\uffc9\026\uffbc\027\uffc9\030" +
    "\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\042\uffc9\060\uffc9" +
    "\061\uffc9\062\uffc9\001\002\000\022\013\145\042\116\043" +
    "\134\053\132\062\133\063\141\064\136\065\147\001\002" +
    "\000\010\014\uffa4\022\uffa4\023\uffa4\001\002\000\022\013" +
    "\uff7c\042\uff7c\043\uff7c\053\uff7c\062\uff7c\063\uff7c\064\uff7c" +
    "\065\uff7c\001\002\000\022\013\uff7b\042\uff7b\043\uff7b\053" +
    "\uff7b\062\uff7b\063\uff7b\064\uff7b\065\uff7b\001\002\000\022" +
    "\013\uff7d\042\uff7d\043\uff7d\053\uff7d\062\uff7d\063\uff7d\064" +
    "\uff7d\065\uff7d\001\002\000\022\013\uff7a\042\uff7a\043\uff7a" +
    "\053\uff7a\062\uff7a\063\uff7a\064\uff7a\065\uff7a\001\002\000" +
    "\022\013\uff7e\042\uff7e\043\uff7e\053\uff7e\062\uff7e\063\uff7e" +
    "\064\uff7e\065\uff7e\001\002\000\022\013\145\042\116\043" +
    "\134\053\132\062\133\063\141\064\136\065\147\001\002" +
    "\000\022\013\uff7f\042\uff7f\043\uff7f\053\uff7f\062\uff7f\063" +
    "\uff7f\064\uff7f\065\uff7f\001\002\000\010\014\uffa1\022\uffa1" +
    "\023\uffa1\001\002\000\022\013\145\042\116\043\134\053" +
    "\132\062\133\063\141\064\136\065\147\001\002\000\022" +
    "\013\uffa6\042\uffa6\043\uffa6\053\uffa6\062\uffa6\063\uffa6\064" +
    "\uffa6\065\uffa6\001\002\000\006\014\uffa8\023\uffa8\001\002" +
    "\000\032\003\uffbe\005\uffbe\025\uffbe\030\uffbe\031\uffbe\032" +
    "\uffbe\033\uffbe\034\uffbe\042\uffbe\060\uffbe\061\uffbe\062\uffbe" +
    "\001\002\000\032\003\127\005\115\025\114\030\123\031" +
    "\104\032\111\033\112\034\117\042\116\060\103\061\126" +
    "\062\105\001\002\000\036\003\uffc2\005\uffc2\006\uffc2\025" +
    "\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2" +
    "\042\uffc2\060\uffc2\061\uffc2\062\uffc2\001\002\000\040\003" +
    "\uffb8\005\uffb8\006\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8" +
    "\031\uffb8\032\uffb8\033\uffb8\034\uffb8\042\uffb8\060\uffb8\061" +
    "\uffb8\062\uffb8\001\002\000\040\003\uffb6\005\uffb6\006\uffb6" +
    "\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033" +
    "\uffb6\034\uffb6\042\uffb6\060\uffb6\061\uffb6\062\uffb6\001\002" +
    "\000\024\003\252\013\145\042\116\043\134\053\132\062" +
    "\133\063\141\064\136\065\147\001\002\000\004\014\uffc0" +
    "\001\002\000\004\014\254\001\002\000\032\003\127\005" +
    "\115\025\114\030\123\031\104\032\111\033\112\034\117" +
    "\042\116\060\103\061\126\062\105\001\002\000\036\003" +
    "\uffc3\005\uffc3\006\uffc3\025\uffc3\027\uffc3\030\uffc3\031\uffc3" +
    "\032\uffc3\033\uffc3\034\uffc3\042\uffc3\060\uffc3\061\uffc3\062" +
    "\uffc3\001\002\000\004\014\257\001\002\000\032\003\127" +
    "\005\115\025\114\030\123\031\104\032\111\033\112\034" +
    "\117\042\116\060\103\061\126\062\105\001\002\000\036" +
    "\003\uffbf\005\uffbf\006\uffbf\025\uffbf\027\uffbf\030\uffbf\031" +
    "\uffbf\032\uffbf\033\uffbf\034\uffbf\042\uffbf\060\uffbf\061\uffbf" +
    "\062\uffbf\001\002\000\004\062\266\001\002\000\022\013" +
    "\145\042\116\043\134\053\132\062\133\063\141\064\136" +
    "\065\147\001\002\000\060\007\uff9a\010\uff9a\011\uff9a\012" +
    "\uff9a\013\uff9a\014\uff9a\022\uff9a\023\uff9a\035\uff9a\036\uff9a" +
    "\037\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051" +
    "\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a" +
    "\001\002\000\004\012\265\001\002\000\060\007\uff96\010" +
    "\uff96\011\uff96\012\uff96\013\uff96\014\uff96\022\uff96\023\uff96" +
    "\035\uff96\036\uff96\037\uff96\044\uff96\045\uff96\046\uff96\047" +
    "\uff96\050\uff96\051\uff96\052\uff96\053\uff96\054\uff96\055\uff96" +
    "\056\uff96\057\uff96\001\002\000\060\007\uff97\010\uff97\011" +
    "\uff97\012\uff97\013\uff97\014\uff97\022\uff97\023\uff97\035\uff97" +
    "\036\uff97\037\uff97\044\uff97\045\uff97\046\uff97\047\uff97\050" +
    "\uff97\051\uff97\052\uff97\053\uff97\054\uff97\055\uff97\056\uff97" +
    "\057\uff97\001\002\000\004\062\270\001\002\000\060\007" +
    "\uff98\010\uff98\011\uff98\012\uff98\013\uff98\014\uff98\022\uff98" +
    "\023\uff98\035\uff98\036\uff98\037\uff98\044\uff98\045\uff98\046" +
    "\uff98\047\uff98\050\uff98\051\uff98\052\uff98\053\uff98\054\uff98" +
    "\055\uff98\056\uff98\057\uff98\001\002\000\034\003\127\005" +
    "\115\006\272\025\114\030\123\031\104\032\111\033\112" +
    "\034\117\042\116\060\103\061\126\062\105\001\002\000" +
    "\040\003\uffc5\005\uffc5\006\uffc5\025\uffc5\026\uffc5\027\uffc5" +
    "\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\042\uffc5\060" +
    "\uffc5\061\uffc5\062\uffc5\001\002\000\032\003\127\005\115" +
    "\025\114\030\123\031\104\032\111\033\112\034\117\042" +
    "\116\060\103\061\126\062\105\001\002\000\036\003\uffc1" +
    "\005\uffc1\006\uffc1\025\uffc1\027\uffc1\030\uffc1\031\uffc1\032" +
    "\uffc1\033\uffc1\034\uffc1\042\uffc1\060\uffc1\061\uffc1\062\uffc1" +
    "\001\002\000\004\007\277\001\002\000\040\003\uffb3\005" +
    "\uffb3\006\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3" +
    "\032\uffb3\033\uffb3\034\uffb3\042\uffb3\060\uffb3\061\uffb3\062" +
    "\uffb3\001\002\000\040\003\uffb4\005\uffb4\006\uffb4\025\uffb4" +
    "\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034" +
    "\uffb4\042\uffb4\060\uffb4\061\uffb4\062\uffb4\001\002\000\004" +
    "\007\302\001\002\000\004\007\uffba\001\002\000\040\003" +
    "\uffb0\005\uffb0\006\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0" +
    "\031\uffb0\032\uffb0\033\uffb0\034\uffb0\042\uffb0\060\uffb0\061" +
    "\uffb0\062\uffb0\001\002\000\040\003\uffb9\005\uffb9\006\uffb9" +
    "\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033" +
    "\uffb9\034\uffb9\042\uffb9\060\uffb9\061\uffb9\062\uffb9\001\002" +
    "\000\004\027\306\001\002\000\004\013\311\001\002\000" +
    "\004\013\uffac\001\002\000\004\007\310\001\002\000\040" +
    "\003\uffb7\005\uffb7\006\uffb7\025\uffb7\026\uffb7\027\uffb7\030" +
    "\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\042\uffb7\060\uffb7" +
    "\061\uffb7\062\uffb7\001\002\000\022\013\145\042\116\043" +
    "\134\053\132\062\133\063\141\064\136\065\147\001\002" +
    "\000\004\014\313\001\002\000\004\007\uffad\001\002\000" +
    "\040\003\uffb5\005\uffb5\006\uffb5\025\uffb5\026\uffb5\027\uffb5" +
    "\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\042\uffb5\060" +
    "\uffb5\061\uffb5\062\uffb5\001\002\000\006\042\116\062\133" +
    "\001\002\000\004\014\317\001\002\000\004\007\320\001" +
    "\002\000\040\003\uffb2\005\uffb2\006\uffb2\025\uffb2\026\uffb2" +
    "\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\042" +
    "\uffb2\060\uffb2\061\uffb2\062\uffb2\001\002\000\022\013\145" +
    "\042\116\043\134\053\132\062\133\063\141\064\136\065" +
    "\147\001\002\000\004\007\uff9d\001\002\000\022\013\uff80" +
    "\042\uff80\043\uff80\053\uff80\062\uff80\063\uff80\064\uff80\065" +
    "\uff80\001\002\000\004\007\uff9c\001\002\000\024\013\145" +
    "\014\326\042\116\043\134\053\132\062\133\063\141\064" +
    "\136\065\147\001\002\000\004\007\uff9e\001\002\000\004" +
    "\014\330\001\002\000\004\007\uff9f\001\002\000\004\007" +
    "\uffa0\001\002\000\006\010\uffe2\014\uffe2\001\002\000\004" +
    "\010\342\001\002\000\004\014\335\001\002\000\010\003" +
    "\uffe9\005\uffe9\062\uffe9\001\002\000\010\003\022\005\337" +
    "\062\014\001\002\000\034\003\uffca\005\uffca\006\uffca\025" +
    "\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca\042\uffca" +
    "\060\uffca\061\uffca\062\uffca\001\002\000\034\003\127\005" +
    "\115\006\341\025\114\030\123\031\104\032\111\033\112" +
    "\034\117\042\116\060\103\061\126\062\105\001\002\000" +
    "\010\006\uffe3\015\uffe3\062\uffe3\001\002\000\004\062\014" +
    "\001\002\000\006\010\uffdf\014\uffdf\001\002\000\010\003" +
    "\022\005\345\062\014\001\002\000\034\003\uffca\005\uffca" +
    "\006\uffca\025\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034" +
    "\uffca\042\uffca\060\uffca\061\uffca\062\uffca\001\002\000\034" +
    "\003\127\005\115\006\347\025\114\030\123\031\104\032" +
    "\111\033\112\034\117\042\116\060\103\061\126\062\105" +
    "\001\002\000\010\006\uffe5\015\uffe5\062\uffe5\001\002\000" +
    "\010\010\uffde\011\351\014\uffde\001\002\000\004\012\352" +
    "\001\002\000\006\010\uffdd\014\uffdd\001\002\000\004\013" +
    "\uffdb\001\002\000\004\006\355\001\002\000\016\003\uffd7" +
    "\005\uffd7\016\uffd7\020\uffd7\024\uffd7\062\uffd7\001\002\000" +
    "\004\014\357\001\002\000\010\003\uffe9\005\uffe9\062\uffe9" +
    "\001\002\000\010\003\022\005\361\062\014\001\002\000" +
    "\034\003\uffca\005\uffca\006\uffca\025\uffca\030\uffca\031\uffca" +
    "\032\uffca\033\uffca\034\uffca\042\uffca\060\uffca\061\uffca\062" +
    "\uffca\001\002\000\034\003\127\005\115\006\363\025\114" +
    "\030\123\031\104\032\111\033\112\034\117\042\116\060" +
    "\103\061\126\062\105\001\002\000\010\006\uffcf\015\uffcf" +
    "\062\uffcf\001\002\000\004\013\uffdc\001\002\000\020\003" +
    "\ufff1\005\ufff1\006\ufff1\016\ufff1\020\ufff1\024\ufff1\062\ufff1" +
    "\001\002\000\010\003\uffe9\006\uffe9\062\uffe9\001\002\000" +
    "\010\003\022\006\370\062\014\001\002\000\016\003\uffcd" +
    "\005\uffcd\016\uffcd\020\uffcd\024\uffcd\062\uffcd\001\002\000" +
    "\004\005\uffcc\001\002\000\010\006\374\015\056\062\014" +
    "\001\002\000\010\006\uffe8\015\uffe8\062\uffe8\001\002\000" +
    "\004\002\001\001\002\000\006\007\u0107\010\u0106\001\002" +
    "\000\004\010\uffee\001\002\000\010\007\uffec\010\uffec\011" +
    "\u0101\001\002\000\006\007\uffef\010\uffef\001\002\000\004" +
    "\012\u0102\001\002\000\006\007\uffeb\010\uffeb\001\002\000" +
    "\004\010\u0104\001\002\000\004\062\377\001\002\000\006" +
    "\007\uffed\010\uffed\001\002\000\004\062\377\001\002\000" +
    "\020\003\ufff2\005\ufff2\006\ufff2\016\ufff2\020\ufff2\024\ufff2" +
    "\062\ufff2\001\002\000\006\007\ufff0\010\ufff0\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0107\000\004\063\003\001\001\000\002\001\001\000" +
    "\004\057\006\001\001\000\002\001\001\000\004\003\007" +
    "\001\001\000\022\005\012\006\023\007\016\010\014\021" +
    "\022\066\020\073\017\074\010\001\001\000\006\012\374" +
    "\064\377\001\001\000\004\004\371\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\074\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\074\030\001\001\000\002\001\001\000\006\011\032" +
    "\062\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\062\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\045\001\001" +
    "\000\006\007\047\074\010\001\001\000\020\015\056\020" +
    "\054\022\062\023\060\041\053\067\057\074\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\064\067\057\074\051\001\001\000\002\001\001\000\012" +
    "\015\056\023\063\067\057\074\051\001\001\000\010\015" +
    "\064\067\057\074\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\073\070\067\074\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\343\001\001" +
    "\000\006\104\333\105\332\001\001\000\002\001\001\000" +
    "\006\070\331\074\070\001\001\000\004\013\076\001\001" +
    "\000\006\007\047\074\010\001\001\000\004\017\100\001" +
    "\001\000\030\026\127\027\120\030\123\032\106\034\130" +
    "\035\124\040\105\054\112\055\121\060\117\065\101\001" +
    "\001\000\004\037\320\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\026\303\027\120\030" +
    "\123\032\106\034\130\035\124\040\105\054\112\055\121" +
    "\060\117\065\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\277\001\001\000\022\031\141\060\117" +
    "\065\137\075\142\076\143\077\274\100\134\101\145\001" +
    "\001\000\004\053\272\001\001\000\002\001\001\000\004" +
    "\017\270\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\061\262\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\031\141\060\117\065\137\075\142" +
    "\076\143\077\136\100\134\101\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\074\175\001\001\000\004\051\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\164\001\001" +
    "\000\002\001\001\000\016\060\117\065\137\075\142\076" +
    "\143\100\156\101\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\031\141\060\117\065\137\075\142\076" +
    "\143\077\154\100\134\101\145\001\001\000\004\052\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\060\117\065\137\076\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\051\161\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\060\117\065\137\075\162\076\143\101" +
    "\145\001\001\000\002\001\001\000\024\031\141\060\117" +
    "\065\137\071\167\075\142\076\143\077\166\100\134\101" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\072\171\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\031\141\060\117\065\137\075\142" +
    "\076\143\077\173\100\134\101\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\031\141" +
    "\060\117\065\137\075\142\076\143\077\177\100\134\101" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\031\141\060\117\065\137\075\142\076\143\077\202\100" +
    "\134\101\145\001\001\000\004\033\204\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\027\212\032\106\040\105" +
    "\054\211\055\213\060\117\065\101\001\001\000\004\053" +
    "\244\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\031\141\043\216\044\221\045\215\046\220\060\117\065" +
    "\137\075\142\076\143\077\217\100\134\101\145\102\222" +
    "\001\001\000\002\001\001\000\004\036\240\001\001\000" +
    "\004\047\235\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\026\224\027\120\030\123\032" +
    "\106\034\225\035\124\040\105\054\112\055\121\060\117" +
    "\065\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\031\141\045\227\060\117\065\137\075\142\076\143" +
    "\077\217\100\134\101\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\031\141\060\117\065" +
    "\137\075\142\076\143\077\237\100\134\101\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\031\141\044" +
    "\242\045\215\046\220\060\117\065\137\075\142\076\143" +
    "\077\217\100\134\101\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\027\120\030\123" +
    "\032\106\034\246\035\245\040\105\054\112\055\121\060" +
    "\117\065\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\031\141\043\216\044\221\045" +
    "\215\046\220\060\117\065\137\075\142\076\143\077\217" +
    "\100\134\101\145\102\252\001\001\000\004\106\255\001" +
    "\001\000\002\001\001\000\030\026\254\027\120\030\123" +
    "\032\106\034\225\035\124\040\105\054\112\055\121\060" +
    "\117\065\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\026\257\027\120\030\123\032\106\034\130\035" +
    "\124\040\105\054\112\055\121\060\117\065\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\031\141\060" +
    "\117\065\137\075\142\076\143\077\263\100\134\101\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\026\127\027\120\030\123\032\106\034\130\035" +
    "\124\040\105\054\112\055\121\060\117\065\101\001\001" +
    "\000\002\001\001\000\026\027\120\030\123\032\106\034" +
    "\246\035\273\040\105\054\112\055\121\060\117\065\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\042\306\056" +
    "\304\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\031\141\043\216\044" +
    "\221\045\215\046\220\060\117\065\137\075\142\076\143" +
    "\077\217\100\134\101\145\102\311\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\060\117" +
    "\065\315\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\031\141\060\117\065\137\075\142" +
    "\076\143\077\330\100\134\101\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\031\141" +
    "\060\117\065\137\071\326\075\142\076\143\077\166\100" +
    "\134\101\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\335\001\001" +
    "\000\006\007\047\074\010\001\001\000\004\017\337\001" +
    "\001\000\030\026\127\027\120\030\123\032\106\034\130" +
    "\035\124\040\105\054\112\055\121\060\117\065\101\001" +
    "\001\000\002\001\001\000\006\070\342\074\070\001\001" +
    "\000\002\001\001\000\006\007\047\074\010\001\001\000" +
    "\004\017\345\001\001\000\030\026\127\027\120\030\123" +
    "\032\106\034\130\035\124\040\105\054\112\055\121\060" +
    "\117\065\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\357\001\001\000\006\007\047\074\010\001\001\000" +
    "\004\017\361\001\001\000\030\026\127\027\120\030\123" +
    "\032\106\034\130\035\124\040\105\054\112\055\121\060" +
    "\117\065\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\366\001\001\000\006\007" +
    "\047\074\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\372\067\057\074\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\103\u0102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\064\u0104" +
    "\001\001\000\002\001\001\000\004\064\u0107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }



	Logger log = Logger.getLogger(getClass());
	boolean errorDetected = false;
	
	protected static final int _error_sync_size = 1;
	
	protected int error_sync_size() { return _error_sync_size; }
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {
  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Mulop ::= MOD 
            {
              Mulop RESULT = null;
		 RESULT=new Modop(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Mulop ::= DIV 
            {
              Mulop RESULT = null;
		 RESULT=new Divop(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Mulop ::= MUL 
            {
              Mulop RESULT = null;
		 RESULT=new Mulop(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Addop ::= MINUS 
            {
              Addop RESULT = null;
		 RESULT=new Minusop(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(39/*Addop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Addop ::= PLUS 
            {
              Addop RESULT = null;
		 RESULT=new Plusop(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(39/*Addop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Relop ::= LTE 
            {
              Relop RESULT = null;
		 RESULT=new LteOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Relop ::= LT 
            {
              Relop RESULT = null;
		 RESULT=new LtOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Relop ::= GTE 
            {
              Relop RESULT = null;
		 RESULT=new GteOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Relop ::= GT 
            {
              Relop RESULT = null;
		 RESULT=new GtOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Relop ::= NEQ 
            {
              Relop RESULT = null;
		 RESULT=new NeqOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Relop ::= EQU 
            {
              Relop RESULT = null;
		 RESULT=new EquOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // AssignOp ::= EQUAL 
            {
              AssignOp RESULT = null;
		 RESULT=new AssignOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(29/*AssignOp*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Factor ::= LPAREN Expr RPAREN 
            {
              Factor RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FactorExpr(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(60/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Factor ::= NEW Type 
            {
              Factor RESULT = null;
		int factorTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int factorTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Type factorType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorNoExprNew(factorType); RESULT.setLine(factorTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(60/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Factor ::= NEW Type LSQUARE Expr RSQUARE 
            {
              Factor RESULT = null;
		int factorTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int factorTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Type factorType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FactorNew(factorType, E1); RESULT.setLine(factorTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(60/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Factor ::= CHAR 
            {
              Factor RESULT = null;
		int factorCharleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int factorCharright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Character factorChar = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorChar(factorChar); RESULT.setLine(factorCharleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(60/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Factor ::= BOOL 
            {
              Factor RESULT = null;
		int factorBoolleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int factorBoolright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String factorBool = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorBool(factorBool); RESULT.setLine(factorBoolleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(60/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Factor ::= NUMBER 
            {
              Factor RESULT = null;
		int factorNumleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int factorNumright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer factorNum = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorNumber(factorNum); RESULT.setLine(factorNumleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(60/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Factor ::= Designator 
            {
              Factor RESULT = null;
		int factorDesleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int factorDesright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Designator factorDes = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorDesNoActPars(factorDes); RESULT.setLine(factorDesleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(60/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Factor ::= Designator LPAREN RPAREN 
            {
              Factor RESULT = null;
		int factorDesleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int factorDesright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator factorDes = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new NoFactorsDes(factorDes); RESULT.setLine(factorDesleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(60/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Factor ::= Designator ActParsFactor 
            {
              Factor RESULT = null;
		int factorDesleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int factorDesright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator factorDes = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ActParsFactor A1 = (ActParsFactor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorDesignator(factorDes, A1); RESULT.setLine(factorDesleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(60/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ActParsFactor ::= LPAREN ActPars RPAREN 
            {
              ActParsFactor RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ActPars A1 = (ActPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ActParsFactor(A1); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(38/*ActParsFactor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // FactorList ::= Factor 
            {
              FactorList RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Factor F1 = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorsListOne(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(63/*FactorList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // FactorList ::= FactorList Mulop Factor 
            {
              FactorList RESULT = null;
		int leftMulleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int leftMulright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		FactorList leftMul = (FactorList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Mulop M1 = (Mulop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int rightMulleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int rightMulright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Factor rightMul = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorsList(leftMul, M1, rightMul); RESULT.setLine(leftMulleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(63/*FactorList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Term ::= FactorList 
            {
              Term RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FactorList F1 = (FactorList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TermDecl(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(59/*Term*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // TermList ::= Term 
            {
              TermList RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term T1 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new NoTermsList(T1); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(62/*TermList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // TermList ::= TermList Addop Term 
            {
              TermList RESULT = null;
		int leftAddleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int leftAddright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		TermList leftAdd = (TermList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Addop A1 = (Addop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int rightAddleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int rightAddright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term rightAdd = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TermsList(leftAdd, A1, rightAdd); RESULT.setLine(leftAddleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(62/*TermList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // MinusSign ::= MINUS 
            {
              MinusSign RESULT = null;
		 RESULT=new MinusSign(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*MinusSign*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Expr ::= MinusSign TermList 
            {
              Expr RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MinusSign M1 = (MinusSign)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int T2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int T2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		TermList T2 = (TermList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ExprDeclMinus(M1, T2); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(61/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Expr ::= TermList 
            {
              Expr RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		TermList T1 = (TermList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ExprDecl(T1); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(61/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ExprList ::= 
            {
              ExprList RESULT = null;
		 RESULT=new NoExprListDecl(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(56/*ExprList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ExprList ::= ExprList COMMA Expr 
            {
              ExprList RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ExprList E1 = (ExprList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ExprListDecl(E1, E2); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(56/*ExprList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ActPars ::= Expr ExprList 
            {
              ActPars RESULT = null;
		int actParsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int actParsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr actPars = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ExprList E1 = (ExprList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ActParsDecl(actPars, E1); RESULT.setLine(actParsleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(55/*ActPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DesignatorPart ::= LSQUARE Expr RSQUARE 
            {
              DesignatorPart RESULT = null;
		int desArrayleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int desArrayright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr desArray = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesignatorPartExpr(desArray); RESULT.setLine(desArrayleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(47/*DesignatorPart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DesignatorPart ::= POINT IDENT 
            {
              DesignatorPart RESULT = null;
		int desIdentPartleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int desIdentPartright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String desIdentPart = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorPartIdent(desIdentPart); RESULT.setLine(desIdentPartleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(47/*DesignatorPart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DesignatorList ::= THIS POINT IDENT 
            {
              DesignatorList RESULT = null;
		int desIdentPartleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int desIdentPartright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String desIdentPart = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorThis(desIdentPart); RESULT.setLine(desIdentPartleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(46/*DesignatorList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DesignatorList ::= IDENT 
            {
              DesignatorList RESULT = null;
		int desIdentleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int desIdentright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String desIdent = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new NoDesignatorList(desIdent); RESULT.setLine(desIdentleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(46/*DesignatorList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DesignatorList ::= DesignatorList DesignatorPart 
            {
              DesignatorList RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		DesignatorList D1 = (DesignatorList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int D2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DesignatorPart D2 = (DesignatorPart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorListDecl(D1, D2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(46/*DesignatorList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Designator ::= DesignatorList 
            {
              Designator RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DesignatorList D1 = (DesignatorList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorDecl(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(51/*Designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DesignatorStatement ::= Designator DEC 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DecDesignator(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DesignatorStatement ::= Designator INC 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new IncDesignator(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DesignatorStatement ::= Designator LPAREN RPAREN 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new NoActPartDes(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DesignatorStatement ::= Designator LPAREN ActPars RPAREN 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int A2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ActPars A2 = (ActPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ActParsDesignator(D1, A2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DesignatorStatement ::= Designator AssignOp Expr 
            {
              DesignatorStatement RESULT = null;
		int desLeftleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int desLeftright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator desLeft = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		AssignOp A1 = (AssignOp)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int exprRightleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int exprRightright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr exprRight = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AssignDesignatorStat(desLeft, A1, exprRight); RESULT.setLine(desLeftleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CondFact ::= Expr Relop Expr 
            {
              CondFact RESULT = null;
		int cond1Exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int cond1Exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Expr cond1Expr = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int R1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int R1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Relop R1 = (Relop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int cond2Exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int cond2Exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr cond2Expr = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new RelopCondFact(cond1Expr, R1, cond2Expr); RESULT.setLine(cond1Exprleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(35/*CondFact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CondFact ::= Expr 
            {
              CondFact RESULT = null;
		int condExprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int condExprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr condExpr = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondFactExpr(condExpr); RESULT.setLine(condExprleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(35/*CondFact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CondFactList ::= CondFact 
            {
              CondFactList RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondFact C1 = (CondFact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondFactsNoList(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(36/*CondFactList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CondFactList ::= CondFactList AND CondFact 
            {
              CondFactList RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		CondFactList C1 = (CondFactList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondFact C2 = (CondFact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondFactsList(C1, C2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(36/*CondFactList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CondTerm ::= CondFactList 
            {
              CondTerm RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondFactList C1 = (CondFactList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondTerm(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*CondTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OrTerm ::= OR 
            {
              OrTerm RESULT = null;
		 RESULT=new OrTerm(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*OrTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CondTermList ::= CondTerm 
            {
              CondTermList RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondTerm C1 = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondTermsNoList(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*CondTermList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CondTermList ::= CondTermList OrTerm CondTerm 
            {
              CondTermList RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		CondTermList C1 = (CondTermList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int O2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int O2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		OrTerm O2 = (OrTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int C3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondTerm C3 = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondTermsList(C1, O2, C3); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*CondTermList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Condition ::= CondTermList 
            {
              Condition RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondTermList C1 = (CondTermList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Condition(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(64/*Condition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PrintNumConst ::= 
            {
              PrintNumConst RESULT = null;
		 RESULT=new NoPrintNumConst(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*PrintNumConst*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PrintNumConst ::= COMMA NUMBER 
            {
              PrintNumConst RESULT = null;
		int N1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer N1 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new PrintNumberConst(N1); RESULT.setLine(N1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*PrintNumConst*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // WhileTerm ::= WHILE 
            {
              WhileTerm RESULT = null;
		 RESULT=new WhileTerm(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(44/*WhileTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // WhileStmt ::= WhileTerm LPAREN Condition RPAREN 
            {
              WhileStmt RESULT = null;
		int W1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int W1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		WhileTerm W1 = (WhileTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int doCondleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int doCondright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Condition doCond = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new WhileStmt(W1, doCond); RESULT.setLine(W1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*WhileStmt*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DoWhile ::= DO 
            {
              DoWhile RESULT = null;
		int doWhileleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int doWhileright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Object doWhile = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new IdentDo(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*DoWhile*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SingleStatement ::= error Expr SEMI 
            {
              SingleStatement RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji "+ eleft, null);  RESULT=new ErrorAssignDesignator(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*SingleStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SingleStatement ::= GOTO GotoLabel SEMI 
            {
              SingleStatement RESULT = null;
		int G1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int G1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		GotoLabel G1 = (GotoLabel)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new GoToStatement(G1); RESULT.setLine(G1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*SingleStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SingleStatement ::= PRINT LPAREN Expr PrintNumConst RPAREN SEMI 
            {
              SingleStatement RESULT = null;
		int printExprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int printExprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Expr printExpr = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int P1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int P1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		PrintNumConst P1 = (PrintNumConst)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new PrintStatement(printExpr, P1); RESULT.setLine(printExprleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*SingleStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SingleStatement ::= READ LPAREN Designator RPAREN SEMI 
            {
              SingleStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new ReadStatement(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*SingleStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SingleStatement ::= RETURN SEMI 
            {
              SingleStatement RESULT = null;
		 RESULT=new NoExprReturn(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*SingleStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SingleStatement ::= RETURN Expr SEMI 
            {
              SingleStatement RESULT = null;
		int returnExprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int returnExprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr returnExpr = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ReturnStatement(returnExpr); RESULT.setLine(returnExprleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*SingleStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SingleStatement ::= CONTINUE SEMI 
            {
              SingleStatement RESULT = null;
		 RESULT=new ContinueStatement(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*SingleStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SingleStatement ::= BREAK SEMI 
            {
              SingleStatement RESULT = null;
		 RESULT=new BreakStatement(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*SingleStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SingleStatement ::= DoWhile Statement WhileStmt SEMI 
            {
              SingleStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		DoWhile D1 = (DoWhile)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int doStatleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int doStatright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Statement doStat = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int W2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int W2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		WhileStmt W2 = (WhileStmt)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DoStatement(D1, doStat, W2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*SingleStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SingleStatement ::= IfStatement ElseTerm Matched 
            {
              SingleStatement RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		IfStatement I1 = (IfStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ElseTerm E2 = (ElseTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int M3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Matched M3 = (Matched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new IfElseStatement(I1, E2, M3); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*SingleStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SingleStatement ::= DesignatorStatement SEMI 
            {
              SingleStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		DesignatorStatement D1 = (DesignatorStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesignatorStatements(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*SingleStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // GotoLabel ::= IDENT 
            {
              GotoLabel RESULT = null;
		int gotoLabelleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int gotoLabelright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String gotoLabel = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new GotoLabel(gotoLabel); RESULT.setLine(gotoLabelleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(10/*GotoLabel*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Label ::= IDENT 
            {
              Label RESULT = null;
		int labelIdentleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int labelIdentright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String labelIdent = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Label(labelIdent); RESULT.setLine(labelIdentleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*Label*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IfStatement ::= IfTerm LPAREN Condition RPAREN Matched 
            {
              IfStatement RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		IfTerm I1 = (IfTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Condition C2 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int M3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Matched M3 = (Matched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new IfStat(I1, C2, M3); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*IfStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // IfTerm ::= IF 
            {
              IfTerm RESULT = null;
		 RESULT=new IfTerm(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(43/*IfTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ElseTerm ::= ELSE 
            {
              ElseTerm RESULT = null;
		 RESULT=new ElseTerm(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(41/*ElseTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Unmatched ::= IfTerm LPAREN error NT$3 RPAREN Statement 
            {
              Unmatched RESULT = null;
              // propagate RESULT from NT$3
              if ( ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value != null )
                RESULT = (Unmatched) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		IfTerm I1 = (IfTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new IfError(I1, S2); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(27/*Unmatched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$3 ::= 
            {
              Object RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		IfTerm I1 = (IfTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
 parser.report_error("Izvrsen oporavak do ) u liniji "+ eleft, null); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(68/*NT$3*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Unmatched ::= IfStatement ElseTerm Unmatched 
            {
              Unmatched RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		IfStatement I1 = (IfStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ElseTerm E2 = (ElseTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int U3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int U3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Unmatched U3 = (Unmatched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new IfElseUnLabel(I1, E2, U3); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(27/*Unmatched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Unmatched ::= Label COLON IfStatement ElseTerm Unmatched 
            {
              Unmatched RESULT = null;
		int L1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int L1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Label L1 = (Label)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int I2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int I2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		IfStatement I2 = (IfStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int E3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ElseTerm E3 = (ElseTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int U4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int U4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Unmatched U4 = (Unmatched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new IfElseUnmatched(L1, I2, E3, U4); RESULT.setLine(L1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(27/*Unmatched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Unmatched ::= IfTerm LPAREN Condition RPAREN Statement 
            {
              Unmatched RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		IfTerm I1 = (IfTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Condition C2 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int S3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S3 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new IfUnmatchedLabel(I1, C2, S3); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(27/*Unmatched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Unmatched ::= Label COLON IfTerm LPAREN Condition RPAREN Statement 
            {
              Unmatched RESULT = null;
		int L1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int L1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Label L1 = (Label)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int I2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int I2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		IfTerm I2 = (IfTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int C3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Condition C3 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int S4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S4 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new IfUnmatched(L1, I2, C3, S4); RESULT.setLine(L1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(27/*Unmatched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Matched ::= LBRACE StatementList RBRACE 
            {
              Matched RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList S1 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new StatementsDecl(S1); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Matched ::= SingleStatement 
            {
              Matched RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		SingleStatement S1 = (SingleStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new NoLabelStatement(S1); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Matched ::= Label COLON SingleStatement 
            {
              Matched RESULT = null;
		int L1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int L1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Label L1 = (Label)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		SingleStatement S2 = (SingleStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StatementDecl(L1, S2); RESULT.setLine(L1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Statement ::= Unmatched 
            {
              Statement RESULT = null;
		int U1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int U1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Unmatched U1 = (Unmatched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new UnmatchedDecl(U1); RESULT.setLine(U1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Statement ::= Matched 
            {
              Statement RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Matched M1 = (Matched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MatchedDecl(M1); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // StatementList ::= 
            {
              StatementList RESULT = null;
		 RESULT=new NoStatementsListDecl(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // StatementList ::= StatementList Statement 
            {
              StatementList RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList S1 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StatementListDecl(S1, S2); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // RecordName ::= RECORD IDENT 
            {
              RecordName RESULT = null;
		int recordNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int recordNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String recordName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new RecordName(recordName); RESULT.setLine(recordNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(52/*RecordName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // RecordDecl ::= RecordName LBRACE LocalVarDecl RBRACE 
            {
              RecordDecl RESULT = null;
		int R1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int R1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		RecordName R1 = (RecordName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int L2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int L2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		LocalVarDecl L2 = (LocalVarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new RecordDecl(R1, L2); RESULT.setLine(R1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(6/*RecordDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ConstructorName ::= IDENT 
            {
              ConstructorName RESULT = null;
		int constructorNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int constructorNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String constructorName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new NameConstructor(constructorName); RESULT.setLine(constructorNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*ConstructorName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ConstructorDecl ::= ConstructorName LPAREN RPAREN LocalVarDecl LBRACE StatementList RBRACE 
            {
              ConstructorDecl RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		ConstructorName C1 = (ConstructorName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int L2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int L2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		LocalVarDecl L2 = (LocalVarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int S3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList S3 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ConstructorDecl(C1, L2, S3); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(16/*ConstructorDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ClassBody ::= ConstructorDecl 
            {
              ClassBody RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstructorDecl C1 = (ConstructorDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new NoMeth(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(14/*ClassBody*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ClassBody ::= ClassMethods 
            {
              ClassBody RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ClassMethods C1 = (ClassMethods)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new NoConstr(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(14/*ClassBody*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ClassBody ::= ConstructorDecl ClassMethods 
            {
              ClassBody RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ConstructorDecl C1 = (ConstructorDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ClassMethods C2 = (ClassMethods)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ClassBodys(C1, C2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(14/*ClassBody*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ClassName ::= CLASS IDENT EXTENDS Type 
            {
              ClassName RESULT = null;
		int childNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int childNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String childName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int parentClassleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int parentClassright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Type parentClass = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ChildClass(childName, parentClass); RESULT.setLine(childNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*ClassName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ClassName ::= CLASS IDENT 
            {
              ClassName RESULT = null;
		int parentNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int parentNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String parentName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ParentClass(parentName); RESULT.setLine(parentNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*ClassName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ClassDecl ::= ClassName LBRACE LocalVarDecl LBRACE RBRACE RBRACE 
            {
              ClassDecl RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		ClassName C1 = (ClassName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int L2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int L2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		LocalVarDecl L2 = (LocalVarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		 RESULT=new LocalVarClassNoBody(C1, L2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(57/*ClassDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ClassDecl ::= ClassName LBRACE LocalVarDecl RBRACE 
            {
              ClassDecl RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		ClassName C1 = (ClassName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int L2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int L2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		LocalVarDecl L2 = (LocalVarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new LocalVarClass(C1, L2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(57/*ClassDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ClassDecl ::= ClassName LBRACE LocalVarDecl LBRACE ClassBody RBRACE RBRACE 
            {
              ClassDecl RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		ClassName C1 = (ClassName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int L2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int L2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		LocalVarDecl L2 = (LocalVarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int C3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ClassBody C3 = (ClassBody)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new ClassDeclLocalBody(C1, L2, C3); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(57/*ClassDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ClassMethods ::= MethodDeclPart 
            {
              ClassMethods RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		MethodDeclPart M1 = (MethodDeclPart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodClassPart(M1); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(17/*ClassMethods*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ClassMethods ::= ClassMethods MethodDeclPart 
            {
              ClassMethods RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ClassMethods C1 = (ClassMethods)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		MethodDeclPart M2 = (MethodDeclPart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodDeclClass(C1, M2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(17/*ClassMethods*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Type ::= IDENT 
            {
              Type RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Type(type); RESULT.setLine(typeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(58/*Type*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ReturnMethodType ::= VOID IDENT 
            {
              ReturnMethodType RESULT = null;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VoidReturnType(methodName); RESULT.setLine(methodNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(53/*ReturnMethodType*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ReturnMethodType ::= Type IDENT 
            {
              ReturnMethodType RESULT = null;
		int methodTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int methodTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Type methodType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodReturnType(methodType, methodName); RESULT.setLine(methodTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(53/*ReturnMethodType*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FormParsPart ::= Type IDENT LSQUARE RSQUARE 
            {
              FormParsPart RESULT = null;
		int formParsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int formParsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Type formPars = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int fparsNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int fparsNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String fparsName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new FormParsArray(formPars, fparsName); RESULT.setLine(formParsleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(54/*FormParsPart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FormParsPart ::= Type IDENT 
            {
              FormParsPart RESULT = null;
		int formParsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int formParsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Type formPars = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int fparsNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int fparsNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String fparsName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormParsNoArray(formPars, fparsName); RESULT.setLine(formParsleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(54/*FormParsPart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FormPars ::= error NT$2 COMMA FormParsPart 
            {
              FormPars RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value != null )
                RESULT = (FormPars) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormParsPart F1 = (FormParsPart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormParsErrorComma(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*FormPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$2 ::= 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
 parser.report_error("Izvrsen oporavak do , u liniji "+ eleft, null); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(67/*NT$2*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FormPars ::= FormParsPart 
            {
              FormPars RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormParsPart F1 = (FormParsPart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormParsPartDecl(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*FormPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FormPars ::= FormPars COMMA FormParsPart 
            {
              FormPars RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		FormPars F1 = (FormPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int F2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormParsPart F2 = (FormParsPart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormParsDecl(F1, F2); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*FormPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MethodDeclPart ::= ReturnMethodType LPAREN error NT$1 RPAREN LocalVarDecl LBRACE StatementList RBRACE 
            {
              MethodDeclPart RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value != null )
                RESULT = (MethodDeclPart) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int R1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int R1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		ReturnMethodType R1 = (ReturnMethodType)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int L2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int L2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		LocalVarDecl L2 = (LocalVarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int S3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList S3 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FormParsErrorRParen(R1, L2, S3); RESULT.setLine(R1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*MethodDeclPart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$1 ::= 
            {
              Object RESULT = null;
		int R1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int R1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ReturnMethodType R1 = (ReturnMethodType)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
 parser.report_error("Izvrsen oporavak do ) u liniji "+ eleft, null); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(66/*NT$1*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MethodDeclPart ::= ReturnMethodType LPAREN RPAREN LocalVarDecl LBRACE StatementList RBRACE 
            {
              MethodDeclPart RESULT = null;
		int R1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int R1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		ReturnMethodType R1 = (ReturnMethodType)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int L2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int L2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		LocalVarDecl L2 = (LocalVarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int S3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList S3 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new NoParametersMethod(R1, L2, S3); RESULT.setLine(R1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*MethodDeclPart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MethodDeclPart ::= ReturnMethodType LPAREN FormPars RPAREN LocalVarDecl LBRACE StatementList RBRACE 
            {
              MethodDeclPart RESULT = null;
		int R1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int R1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		ReturnMethodType R1 = (ReturnMethodType)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int F2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int F2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		FormPars F2 = (FormPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int L3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int L3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		LocalVarDecl L3 = (LocalVarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int S4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList S4 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new MethodDeclaration(R1, F2, L3, S4); RESULT.setLine(R1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*MethodDeclPart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MethodDeclList ::= 
            {
              MethodDeclList RESULT = null;
		 RESULT=new NoMethodDecl(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*MethodDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MethodDeclList ::= MethodDeclList MethodDeclPart 
            {
              MethodDeclList RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodDeclList M1 = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		MethodDeclPart M2 = (MethodDeclPart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodDecl(M1, M2); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*MethodDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LocalVarDecl ::= 
            {
              LocalVarDecl RESULT = null;
		 RESULT=new NoLocalVarDeclaration(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(9/*LocalVarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LocalVarDecl ::= LocalVarDecl VarDecl 
            {
              LocalVarDecl RESULT = null;
		int L1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int L1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		LocalVarDecl L1 = (LocalVarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDecl V2 = (VarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new LocalVarsDecl(L1, V2); RESULT.setLine(L1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(9/*LocalVarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarDeclPart ::= IDENT LSQUARE RSQUARE 
            {
              VarDeclPart RESULT = null;
		int arrayNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int arrayNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String arrayName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new VarDeclArray(arrayName); RESULT.setLine(arrayNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(50/*VarDeclPart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarDeclPart ::= IDENT 
            {
              VarDeclPart RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarDeclNoArray(varName); RESULT.setLine(varNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(50/*VarDeclPart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarDeclList ::= error NT$0 COMMA VarDeclPart 
            {
              VarDeclList RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value != null )
                RESULT = (VarDeclList) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDeclPart V1 = (VarDeclPart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarDeclErrorCOMMA(V1); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*VarDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$0 ::= 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
 parser.report_error("Izvrsen oporavak do , u liniji "+ eleft, null); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(65/*NT$0*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarDeclList ::= VarDeclPart 
            {
              VarDeclList RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDeclPart V1 = (VarDeclPart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarPartDecl(V1); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*VarDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VarDeclList ::= VarDeclList COMMA VarDeclPart 
            {
              VarDeclList RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		VarDeclList V1 = (VarDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDeclPart V2 = (VarDeclPart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarListDecl(V1, V2); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*VarDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarDecl ::= error SEMI 
            {
              VarDecl RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji "+ eleft, null);  RESULT=new VarDeclErrorSEMI(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarDecl ::= Type VarDeclList SEMI 
            {
              VarDecl RESULT = null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Type varType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		VarDeclList V1 = (VarDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new VarsDeclaration(varType, V1); RESULT.setLine(varTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstDeclPart ::= IDENT EQUAL CHAR 
            {
              ConstDeclPart RESULT = null;
		int charConstleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int charConstright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String charConst = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int chleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Character ch = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstCharDecl(charConst, ch); RESULT.setLine(charConstleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(48/*ConstDeclPart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstDeclPart ::= IDENT EQUAL BOOL 
            {
              ConstDeclPart RESULT = null;
		int boolConstleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int boolConstright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String boolConst = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int boolleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String bool = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstBoolDecl(boolConst, bool); RESULT.setLine(boolConstleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(48/*ConstDeclPart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstDeclPart ::= IDENT EQUAL NUMBER 
            {
              ConstDeclPart RESULT = null;
		int numConstleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int numConstright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String numConst = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstNumDecl(numConst, num); RESULT.setLine(numConstleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(48/*ConstDeclPart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstDeclList ::= ConstDeclPart 
            {
              ConstDeclList RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstDeclPart C1 = (ConstDeclPart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstPartDecl(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(7/*ConstDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ConstDeclList ::= ConstDeclList COMMA ConstDeclPart 
            {
              ConstDeclList RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ConstDeclList C1 = (ConstDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstDeclPart C2 = (ConstDeclPart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstListDecl(C1, C2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(7/*ConstDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstDecl ::= CONST Type ConstDeclList SEMI 
            {
              ConstDecl RESULT = null;
		int constTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Type constType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ConstDeclList C1 = (ConstDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ConstsDeclaration(constType, C1); RESULT.setLine(constTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DeclPart ::= RecordDecl 
            {
              DeclPart RESULT = null;
		int R1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int R1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		RecordDecl R1 = (RecordDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new RecordDeclaration(R1); RESULT.setLine(R1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*DeclPart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclPart ::= ClassDecl 
            {
              DeclPart RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ClassDecl C1 = (ClassDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ClassDeclaration(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*DeclPart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DeclPart ::= VarDecl 
            {
              DeclPart RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDecl V1 = (VarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarsDecl(V1); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*DeclPart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DeclPart ::= ConstDecl 
            {
              DeclPart RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstDecl C1 = (ConstDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstsDecl(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*DeclPart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclList ::= 
            {
              DeclList RESULT = null;
		 RESULT=new NoDeclList(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(1/*DeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DeclList ::= DeclList DeclPart 
            {
              DeclList RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		DeclList D1 = (DeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int D2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DeclPart D2 = (DeclPart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DeclarationList(D1, D2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(1/*DeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgName ::= IDENT 
            {
              ProgName RESULT = null;
		int progNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int progNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String progName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ProgName(progName); RESULT.setLine(progNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(45/*ProgName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              SyntaxNode RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROG ProgName DeclList LBRACE MethodDeclList RBRACE 
            {
              Program RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		ProgName p = (ProgName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		DeclList D1 = (DeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodDeclList M2 = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Program(p, D1, M2); RESULT.setLine(pleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(49/*Program*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

